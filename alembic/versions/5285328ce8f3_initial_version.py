# -*- coding: utf-8 -*-
"""initial version

Revision ID: 5285328ce8f3
Revises:
Create Date: 2022-11-03 10:56:23.187196

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = "5285328ce8f3"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "category",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("path", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "project",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tag",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "dataset",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("title_prefix", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["project.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "table",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "short_description", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "long_description", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "update_frequency", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "temporal_coverage", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("data_owner", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("publisher_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "publisher_email", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "source_database", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("source_table", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("source_query", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("dataset_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "column",
        sa.Column("original_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("data_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_sensitive", sa.Boolean(), nullable=False),
        sa.Column(
            "temporal_coverage", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "measurement_unit", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("contains_dict", sa.Boolean(), nullable=False),
        sa.Column("comments", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("table_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["table_id"],
            ["table.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("column")
    op.drop_table("table")
    op.drop_table("dataset")
    op.drop_table("tag")
    op.drop_table("project")
    op.drop_table("category")
    # ### end Alembic commands ###
