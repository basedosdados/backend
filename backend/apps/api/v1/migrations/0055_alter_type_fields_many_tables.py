# Generated by Django 4.2.10 on 2025-03-01 03:05

from django.db import migrations


def alter_columns_of_area(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE area "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(100), "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255), "
            "ALTER COLUMN entity_id TYPE UUID USING entity_id::uuid, "
            "ALTER COLUMN parent_id TYPE UUID USING parent_id::uuid;"
        )

def alter_columns_of_availability(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE availability "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN name TYPE varchar(100), "
            "ALTER COLUMN name_pt TYPE varchar(100), "
            "ALTER COLUMN name_en TYPE varchar(100), "
            "ALTER COLUMN name_es TYPE varchar(100);"
        )

def alter_columns_of_bigquery_type(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE bigquery_type "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN name TYPE varchar(50);"
        )

def alter_columns_of_cloud_table_columns(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE cloud_table_columns "
            "ALTER COLUMN cloudtable_id TYPE UUID USING cloudtable_id::uuid, "
            "ALTER COLUMN column_id TYPE UUID USING column_id::uuid;"
        )

def alter_columns_of_cloud_table(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE cloud_table "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN gcp_project_id TYPE varchar(100), "
            "ALTER COLUMN gcp_dataset_id TYPE varchar(100), "
            "ALTER COLUMN gcp_table_id TYPE varchar(100), "
            "ALTER COLUMN table_id TYPE UUID USING table_id::uuid;"
        )

def alter_columns_of_column(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            """ALTER TABLE "column" """
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255), "
            "ALTER COLUMN name_staging TYPE varchar(255), "
            "ALTER COLUMN name_staging_en TYPE varchar(255), "
            "ALTER COLUMN name_staging_es TYPE varchar(255), "
            "ALTER COLUMN name_staging_pt TYPE varchar(255), "
            "ALTER COLUMN measurement_unit TYPE varchar(100), "
            "ALTER COLUMN description TYPE text, "
            "ALTER COLUMN description_pt TYPE text, "
            "ALTER COLUMN description_en TYPE text, "
            "ALTER COLUMN description_es TYPE text, "
            "ALTER COLUMN observations TYPE text, "
            "ALTER COLUMN observations_pt TYPE text, "
            "ALTER COLUMN observations_en TYPE text, "
            "ALTER COLUMN observations_es TYPE text, "
            "ALTER COLUMN bigquery_type_id TYPE UUID USING bigquery_type_id::uuid, "
            "ALTER COLUMN directory_primary_key_id TYPE UUID USING directory_primary_key_id::uuid, "
            "ALTER COLUMN observation_level_id TYPE UUID USING observation_level_id::uuid, "
            "ALTER COLUMN status_id TYPE UUID USING status_id::uuid, "
            "ALTER COLUMN table_id TYPE UUID USING table_id::uuid;"
        )

def alter_columns_of_coverage(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE coverage "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN area_id TYPE UUID USING area_id::uuid, "
            "ALTER COLUMN column_id TYPE UUID USING column_id::uuid, "
            "ALTER COLUMN information_request_id TYPE UUID USING information_request_id::uuid, "
            "ALTER COLUMN key_id TYPE UUID USING key_id::uuid, "
            "ALTER COLUMN raw_data_source_id TYPE UUID USING raw_data_source_id::uuid, "
            "ALTER COLUMN table_id TYPE UUID USING table_id::uuid, "
            "ALTER COLUMN analysis_id TYPE UUID USING analysis_id::uuid, "
            "ALTER COLUMN column_original_name_id TYPE UUID USING column_original_name_id::uuid;"
        )

def alter_columns_of_dataset_organizations(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE dataset_organizations "
            "ALTER COLUMN dataset_id TYPE UUID USING dataset_id::uuid, "
            "ALTER COLUMN organization_id TYPE UUID USING organization_id::uuid;"
        )

def alter_columns_of_dataset_tags(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE dataset_tags "
            "ALTER COLUMN dataset_id TYPE UUID USING dataset_id::uuid, "
            "ALTER COLUMN tag_id TYPE UUID USING tag_id::uuid;"
        )

def alter_columns_of_dataset_themes(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE dataset_themes "
            "ALTER COLUMN dataset_id TYPE UUID USING dataset_id::uuid, "
            "ALTER COLUMN theme_id TYPE UUID USING theme_id::uuid;"
        )

def alter_columns_of_dataset(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE dataset "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(100), "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255), "
            "ALTER COLUMN description TYPE text, "
            "ALTER COLUMN description_pt TYPE text, "
            "ALTER COLUMN description_en TYPE text, "
            "ALTER COLUMN description_es TYPE text, "
            "ALTER COLUMN status_id TYPE UUID USING status_id::uuid, "
            "ALTER COLUMN usage_guide TYPE varchar(255);"
        )

def alter_columns_of_datetime_range_units(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE datetime_range_units "
            "ALTER COLUMN datetimerange_id TYPE UUID USING datetimerange_id::uuid, "
            "ALTER COLUMN column_id TYPE UUID USING column_id::uuid;"
        )

def alter_columns_of_datetime_range(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE datetime_range "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN coverage_id TYPE UUID USING coverage_id::uuid;"
        )

def alter_columns_of_entity_category(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE entity_category "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(100), "
            "ALTER COLUMN name TYPE varchar(100), "
            "ALTER COLUMN name_pt TYPE varchar(100), "
            "ALTER COLUMN name_en TYPE varchar(100), "
            "ALTER COLUMN name_es TYPE varchar(100);"
        )

def alter_columns_of_entity(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE entity "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(100), "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255), "
            "ALTER COLUMN category_id TYPE UUID USING category_id::uuid;"
        )

def alter_columns_of_information_request(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE information_request "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN origin TYPE text, "
            "ALTER COLUMN number TYPE varchar(255), "
            "ALTER COLUMN url TYPE text, "
            "ALTER COLUMN data_url TYPE text, "
            "ALTER COLUMN observations TYPE text, "
            "ALTER COLUMN observations_pt TYPE text, "
            "ALTER COLUMN observations_en TYPE text, "
            "ALTER COLUMN observations_es TYPE text, "
            "ALTER COLUMN dataset_id TYPE UUID USING dataset_id::uuid, "
            "ALTER COLUMN started_by_id TYPE int4 USING started_by_id::integer , "
            "ALTER COLUMN status_id TYPE UUID USING status_id::uuid;"
        )

def alter_columns_of_language(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE language "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(50), "
            "ALTER COLUMN name TYPE varchar(100), "
            "ALTER COLUMN name_pt TYPE varchar(100), "
            "ALTER COLUMN name_en TYPE varchar(100), "
            "ALTER COLUMN name_es TYPE varchar(100);"
        )

def alter_columns_of_license(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE license "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(100), "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255);"
        )

def alter_columns_of_measurement_unit_category(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE measurement_unit_category "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(50), "
            "ALTER COLUMN name TYPE varchar(50), "
            "ALTER COLUMN name_pt TYPE varchar(50), "
            "ALTER COLUMN name_en TYPE varchar(50), "
            "ALTER COLUMN name_es TYPE varchar(50);"
        )

def alter_columns_of_measurement_unit(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE measurement_unit "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(50), "
            "ALTER COLUMN name TYPE varchar(50), "
            "ALTER COLUMN name_pt TYPE varchar(50), "
            "ALTER COLUMN name_en TYPE varchar(50), "
            "ALTER COLUMN name_es TYPE varchar(50), "
            "ALTER COLUMN tex TYPE varchar(50), "
            "ALTER COLUMN category_id TYPE UUID USING category_id::uuid;"
        )

def alter_columns_of_observation_level(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE observation_level "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN entity_id TYPE UUID USING entity_id::uuid, "
            "ALTER COLUMN information_request_id TYPE UUID USING information_request_id::uuid, "
            "ALTER COLUMN raw_data_source_id TYPE UUID USING raw_data_source_id::uuid, "
            "ALTER COLUMN table_id TYPE UUID USING table_id::uuid;"
        )

def alter_columns_of_organization(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE organization "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(255), "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255), "
            "ALTER COLUMN description TYPE text, "
            "ALTER COLUMN description_pt TYPE text, "
            "ALTER COLUMN description_en TYPE text, "
            "ALTER COLUMN description_es TYPE text, "
            "ALTER COLUMN website TYPE varchar(255), "
            "ALTER COLUMN twitter TYPE varchar(255), "
            "ALTER COLUMN facebook TYPE varchar(255), "
            "ALTER COLUMN linkedin TYPE varchar(255), "
            "ALTER COLUMN instagram TYPE varchar(255), "
            "ALTER COLUMN picture TYPE varchar(100), "
            "ALTER COLUMN area_id TYPE UUID USING area_id::uuid;"
        )

def alter_columns_of_pipeline(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE pipeline "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN github_url TYPE varchar(255);"
        )

def alter_columns_of_poll(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE poll "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN entity_id TYPE UUID USING entity_id::uuid, "
            "ALTER COLUMN information_request_id TYPE UUID USING information_request_id::uuid, "
            "ALTER COLUMN raw_data_source_id TYPE UUID USING raw_data_source_id::uuid;"
        )

def alter_columns_of_quality_check(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE quality_check "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255), "
            "ALTER COLUMN description TYPE text, "
            "ALTER COLUMN description_pt TYPE text, "
            "ALTER COLUMN description_en TYPE text, "
            "ALTER COLUMN description_es TYPE text, "
            "ALTER COLUMN table_id TYPE UUID USING table_id::uuid;"
        )

def alter_columns_of_raw_data_source_area_ip_address_required(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE raw_data_source_area_ip_address_required "
            "ALTER COLUMN rawdatasource_id TYPE UUID USING rawdatasource_id::uuid, "
            "ALTER COLUMN area_id TYPE UUID USING area_id::uuid;"
        )

def alter_columns_of_raw_data_source_languages(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE raw_data_source_languages "
            "ALTER COLUMN rawdatasource_id TYPE UUID USING rawdatasource_id::uuid, "
            "ALTER COLUMN language_id TYPE UUID USING language_id::uuid;"
        )

def alter_columns_of_raw_data_source(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE raw_data_source "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255), "
            "ALTER COLUMN description TYPE text, "
            "ALTER COLUMN description_pt TYPE text, "
            "ALTER COLUMN description_en TYPE text, "
            "ALTER COLUMN description_es TYPE text, "
            "ALTER COLUMN availability_id TYPE UUID USING availability_id::uuid, "
            "ALTER COLUMN dataset_id TYPE UUID USING dataset_id::uuid, "
            "ALTER COLUMN license_id TYPE UUID USING license_id::uuid, "
            "ALTER COLUMN status_id TYPE UUID USING status_id::uuid;"
        )

def alter_columns_of_status(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE status "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(100), "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255);"
        )

def alter_columns_of_table_data_cleaned_by(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE table_data_cleaned_by "
            "ALTER COLUMN table_id TYPE UUID USING table_id::uuid, "
            "ALTER COLUMN account_id TYPE bigint USING account_id::bigint;"
        )

def alter_columns_of_table_neighbor(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE table_neighbor "
            "ALTER COLUMN id TYPE int4 USING id::integer, "
            "ALTER COLUMN table_a_id TYPE UUID USING table_a_id::uuid, "
            "ALTER COLUMN table_b_id TYPE UUID USING table_b_id::uuid;"
        )

def alter_columns_of_table_published_by(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE table_published_by "
            "ALTER COLUMN table_id TYPE UUID USING  table_id::uuid, "
            "ALTER COLUMN account_id TYPE bigint USING account_id::bigint;"
        )

def alter_columns_of_table_raw_data_source(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE table_raw_data_source "
            "ALTER COLUMN table_id TYPE UUID USING table_id::uuid, "
            "ALTER COLUMN rawdatasource_id TYPE UUID USING rawdatasource_id::uuid;"
        )

def alter_columns_of_table(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            """ALTER TABLE "table" """
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(255), "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255), "
            "ALTER COLUMN description TYPE text, "
            "ALTER COLUMN description_pt TYPE text, "
            "ALTER COLUMN description_en TYPE text, "
            "ALTER COLUMN description_es TYPE text, "
            "ALTER COLUMN data_cleaning_description TYPE text, "
            "ALTER COLUMN source_bucket_name TYPE varchar(255), "
            "ALTER COLUMN uncompressed_file_size TYPE bigint USING uncompressed_file_size::bigint, "
            "ALTER COLUMN compressed_file_size TYPE bigint USING compressed_file_size::bigint, "
            "ALTER COLUMN number_rows TYPE bigint USING number_rows::bigint, "
            "ALTER COLUMN number_columns TYPE int4 USING number_columns::int4, "
            "ALTER COLUMN dataset_id TYPE UUID USING dataset_id::uuid, "
            "ALTER COLUMN license_id TYPE UUID USING license_id::uuid, "
            "ALTER COLUMN partner_organization_id TYPE UUID USING partner_organization_id::uuid, "
            "ALTER COLUMN pipeline_id TYPE UUID USING pipeline_id::uuid, "
            "ALTER COLUMN status_id TYPE UUID USING status_id::uuid;"     
        )

def alter_columns_of_tag(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE tag "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(100), "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255);"
        )

def alter_columns_of_theme(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE theme "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN slug TYPE varchar(100), "
            "ALTER COLUMN name TYPE varchar(255), "
            "ALTER COLUMN name_pt TYPE varchar(255), "
            "ALTER COLUMN name_en TYPE varchar(255), "
            "ALTER COLUMN name_es TYPE varchar(255);"
        )

def alter_columns_of_update(apps, schema_editor):
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            "ALTER TABLE update "
            "ALTER COLUMN id TYPE UUID USING id::uuid, "
            "ALTER COLUMN entity_id TYPE UUID USING entity_id::uuid, "
            "ALTER COLUMN information_request_id TYPE UUID USING information_request_id::uuid, "
            "ALTER COLUMN raw_data_source_id TYPE UUID USING raw_data_source_id::uuid, "
            "ALTER COLUMN table_id TYPE UUID USING table_id::uuid;"
        )

class Migration(migrations.Migration):

    dependencies = [
        ('v1', '0054_alter_organization_area'),
    ]

    operations = [
        migrations.RunPython(alter_columns_of_area),
        migrations.RunPython(alter_columns_of_availability),
        migrations.RunPython(alter_columns_of_bigquery_type),
        migrations.RunPython(alter_columns_of_cloud_table_columns),
        migrations.RunPython(alter_columns_of_cloud_table),
        migrations.RunPython(alter_columns_of_coverage),
        migrations.RunPython(alter_columns_of_dataset_organizations),
        migrations.RunPython(alter_columns_of_dataset_tags),
        migrations.RunPython(alter_columns_of_dataset_themes),
        migrations.RunPython(alter_columns_of_dataset),
        migrations.RunPython(alter_columns_of_datetime_range_units),
        migrations.RunPython(alter_columns_of_datetime_range),
        migrations.RunPython(alter_columns_of_entity_category),
        migrations.RunPython(alter_columns_of_entity),
        migrations.RunPython(alter_columns_of_information_request),
        migrations.RunPython(alter_columns_of_language),
        migrations.RunPython(alter_columns_of_license),
        migrations.RunPython(alter_columns_of_measurement_unit_category),
        migrations.RunPython(alter_columns_of_measurement_unit),
        migrations.RunPython(alter_columns_of_observation_level),
        migrations.RunPython(alter_columns_of_organization),
        migrations.RunPython(alter_columns_of_pipeline),
        migrations.RunPython(alter_columns_of_poll),
        migrations.RunPython(alter_columns_of_quality_check),
        migrations.RunPython(alter_columns_of_raw_data_source_area_ip_address_required),
        migrations.RunPython(alter_columns_of_raw_data_source_languages),
        migrations.RunPython(alter_columns_of_raw_data_source),
        migrations.RunPython(alter_columns_of_status),
        migrations.RunPython(alter_columns_of_table_data_cleaned_by),
        migrations.RunPython(alter_columns_of_table_neighbor),
        migrations.RunPython(alter_columns_of_table_published_by),
        migrations.RunPython(alter_columns_of_table_raw_data_source),
        migrations.RunPython(alter_columns_of_tag),
        migrations.RunPython(alter_columns_of_theme),
        migrations.RunPython(alter_columns_of_update),
        migrations.RunPython(alter_columns_of_table),
        migrations.RunPython(alter_columns_of_column),
    ]